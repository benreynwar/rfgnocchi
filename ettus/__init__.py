import os
import logging
import testfixtures

from pyvivado import interface, signal, builder

from rfgnocchi import config
from rfgnocchi.xilinx.fifo_generator import FifoGeneratorBuilder
from rfgnocchi.xilinx.blk_mem_gen import BlkMemGenBuilder
from rfgnocchi.xilinx.axi_interconnect import AxiInterconnectBuilder
from rfgnocchi.xilinx.processing_system7 import ProcessingSystem7Builder
from rfgnocchi.xilinx.axi_protocol_converter import AxiProtocolConverterBuilder
from rfgnocchi.xilinx.axi_data_fifo import AxiDataFifoBuilder
from rfgnocchi.xilinx.clk_wiz import ClkWizBuilder

logger = logging.getLogger(__name__)

# Define the more complicated builders first.
fifo_short_2clk_builder = FifoGeneratorBuilder({
    'implementation_type': 'independent_clocks_distributed_ram',
    'width': 72,
    'depth': 32,
    'module_name': 'fifo_short_2clk',
})

fifo_4k_2clk_builder = FifoGeneratorBuilder({
    'implementation_type': 'independent_clocks_block_ram',
    'width': 72,
    'depth': 512,
    'module_name': 'fifo_4k_2clk',
})

bootram_builder = BlkMemGenBuilder({
    'write_width_A': 32,
    'read_width_A': 32,
    'write_depth_A': 8192,
    'module_name': 'bootram',
})

e300_ps_fclk0_mmcm_builder = ClkWizBuilder({
    'module_name': 'e300_ps_fclk0_mmcm',
    'clock_frequency': 50,
    'frequency': 50,
    'clock_type': 'single_ended_clock_capable_pin',
    'primary_port': 'clk_50MHz_in',
    'clk_out1_port': 'clk_50MHz_out',
})

processing_system7_builder = ('top', 'e300', 'ip', 'processing_system7', 'processing_system7.xci')
#ProcessingSystem7Builder({
    #    'module_name': 'processing_system7',
    #})

axi4_fifo_512x64_builder = AxiDataFifoBuilder({
    'module_name': 'axi4_fifo_512x64',
    'data_width': 64,
    'write_fifo_depth': 512,
    'read_fifo_depth': 512,
})

axi4_to_axi3_protocol_converter_builder = AxiProtocolConverterBuilder({
    'module_name': 'axi4_to_axi3_protocol_converter',
    'si_protocol': 'axi4',
    'mi_protocol': 'axi3',
})

axi3_to_axi4lite_protocol_converter_builder = AxiProtocolConverterBuilder({
    'module_name': 'axi3_to_axi4lite_protocol_converter',
    'si_protocol': 'axi3',
    'mi_protocol': 'axi4lite',
})

# FIXME : Fifo builders set up incorrectly.
axi64_4k_2clk_fifo_builder = FifoGeneratorBuilder({
    'implementation_type': 'independent_clocks_block_ram',
    'width': 18,
    'depth': 1024,
    'module_name': 'axi64_4k_clk_fifo',
})

axi64_8k_2clk_fifo_builder = FifoGeneratorBuilder({
    'implementation_type': 'independent_clocks_block_ram',
    'width': 18,
    'depth': 1024,
    'module_name': 'axi64_8k_clk_fifo',
})

# FIXME: AxiInterconnect not set up
axi_intercon_2x64_128_builder = AxiInterconnectBuilder({
    'module_name': 'axi_intercon_2x64_128_builder',
})
    
# And then a structure from which we can generate the simpler builders.
builder_structure = {
    # FIFO
    'axi_fifo_2clk_cascade': (('fifo', 'axi_fifo_2clk_cascade.v'),
                              'axi_fifo_short',
                              'axi_fifo_2clk',),
    'axi_fifo_short': (('fifo', 'axi_fifo_short.v'),),
    'axi_fifo_2clk': (('fifo', 'axi_fifo_2clk.v'),
                      fifo_short_2clk_builder,
                      fifo_4k_2clk_builder,
                      'axi_fifo',),
    'axi_fifo': (('fifo', 'axi_fifo.v'),
                 'axi_fifo_flop',
                 'axi_fifo_short',
                 'axi_fifo_bram',),
    'axi_fifo_flop': (('fifo', 'axi_fifo_flop.v'),),
    'axi_fifo_bram': (('fifo', 'axi_fifo_bram.v'),
                      'ram_2port',),
    'axi_mux4': (('fifo', 'axi_mux4.v'),
                 'axi_fifo_short'),
    'axi_demux4': (('fifo', 'axi_demux4.v'),),
    'axi_packet_gate': (('fifo', 'axi_packet_gate.v'),
                         'axi_fifo_cascade',),
    'axi_fifo_cascade': (('fifo', 'axi_fifo_cascade.v'),
                         'axi_fifo_short',),
    'axi_mux': (('fifo', 'axi_mux.v'),
                'axi_fifo_short',),
    'axi_demux': (('fifo', 'axi_demux.v'),),
    # RFNoC
    'noc_output_port': (('rfnoc', 'noc_output_port.v'),
                        'axi_packet_gate',
                        'source_flow_control',),
    'noc_input_port': (('rfnoc', 'noc_input_port.v'),
                       'axi_fifo_cascade',
                       'tx_responder',
                       ),
    'noc_shell': (('rfnoc', 'noc_shell.v'),
                  'axi_fifo_2clk_cascade',
                  'axi_mux4',
                  'axi_demux4',
                  'radio_ctrl_proc',
                  'setting_reg',
                  'noc_output_port',
                  'axi_mux',
                  'axi_demux',
                  'noc_input_port',),
    'axi_wrapper': (('rfnoc', 'axi_wrapper.v'),
                    'chdr_deframer',
                    'chdr_framer',
                    'axi_fifo_short',
                    'axi_fifo',),
    'chdr_deframer': (('rfnoc', 'chdr_deframer.v'),
                      'axi_fifo',),
    'chdr_framer': (('rfnoc', 'chdr_framer.v'),
                    'axi_fifo',
                    'axi_fifo_short',),
    'axi_round_and_clip_complex': (('rfnoc', 'axi_round_and_clip_complex.v'),
                                   'split_complex',
                                   'axi_round_and_clip',
                                   'join_complex',),
    'split_complex': (('rfnoc', 'split_complex.v'),),
    'axi_round_and_clip': (('rfnoc', 'axi_round_and_clip.v'),
                           'axi_round',
                           'axi_clip',),
    'axi_round': (('rfnoc', 'axi_round.v'),
                  'axi_fifo',),
    'axi_clip': (('rfnoc', 'axi_clip.v'),
                 'axi_fifo',),
    'join_complex': (('rfnoc', 'join_complex.v'),),
    'complex_to_magsq': (('rfnoc', 'complex_to_magsq.v'),
                         'split_complex',
                         'mult',
                         'mult_add',),
    'mult': (('rfnoc', 'mult.v'),
             'axi_pipe_join',
             'DSP48E1',),
    'mult_rc': (('rfnoc', 'mult_rc.v'),
                'mult',),
    'mult_add': (('rfnoc', 'mult_add.v'),
                 'axi_pipe_mac',
                 'DSP48E1',),
    'DSP48E1': (),
    'axi_pipe_join': (('rfnoc', 'axi_pipe_join.v'),
                      'axi_pipe',
                      'axi_join',),
    'axi_pipe': (('rfnoc', 'axi_pipe.v'),),
    'axi_join': (('rfnoc', 'axi_join.v'),),
    'axi_pipe_mac': (('rfnoc', 'axi_pipe_mac.v'),
                      'axi_pipe',
                      'axi_join',),
    # Vita
    'tx_responder': (('vita', 'tx_responder.v'),
                     'trigger_context_pkt',
                     'axi_fifo_short',
                     'context_packet_gen',),
    'trigger_context_pkt': (('vita', 'trigger_context_pkt.v'),
                            'setting_reg',),
    'context_packet_gen': (('vita', 'context_packet_gen.v'),),
    'new_tx_deframer': (('vita', 'new_tx_deframer.v'),
                        'axi_fifo_short', ),
    'new_tx_control': (('vita', 'new_tx_control.v'),
                       'setting_reg',
                       'time_compare', ),
    'new_rx_framer': (('vita', 'new_rx_framer.v'),
                      'setting_reg',
                      'axi_fifo',
                      'axi_fifo_short',
                  ),
    'new_rx_control': (('vita', 'new_rx_control.v'),
                       'setting_reg',
                       'axi_fifo_short',
                       'time_compare',
                   ),
    
    # Packet Proc
    'source_flow_control': (('packet_proc', 'source_flow_control.v'),
                            'setting_reg',),
    'eth_interface': (('packet_proc', 'eth_interface.v'),
                      'axi_packet_gate',
                      'eth_dispatch',
                      'axi_fifo_short',
                      'axi_fifo',
                      'chdr_eth_framer',
                      'axi_mux4',),
    'eth_dispatch': (('packet_proc', 'eth_dispatch.v'),
                     'setting_reg',
                     'axi_fifo',
                     'fix_short_packet'),
    'fix_short_packet': (('packet_proc', 'fix_short_packet.v'),),
    'chdr_eth_framer': (('packet_proc', 'chdir_eth_framer.v'),
                         'setting_reg',
                         'ram_2port',
                         'ip_hdr_checksum',),
    'ip_hdr_checksum': (('packet_proc', 'ip_hdr_checksum.v'),),
    'cvita_dest_lookup': (('packet_proc', 'cvita_dest_lookup.v'),
                          'ram_2port',
                      ),
    # Control
    'ram_2port': (('control', 'ram_2port.v'),),
    'radio_ctrl_proc': (('control', 'radio_ctrl_proc.v'),
                        'time_compare',),
    'setting_reg': (('control', 'setting_reg.v'),),
    'axi_crossbar': (('control', 'axi_crossbar.v'),
                     'axi_slave_mux',
                     'axi_forwarding_cam',),
    'axi_slave_mux': (('control', 'axi_slave_mux.v'),),
    'axi_forwarding_cam': (('control', 'axi_forwarding_cam.v'),),
    'radio_ctrl_proc': (('control', 'radio_ctrl_proc.v'),
                        'time_compare', ),
    'settings_bus_crossclock': (('control', 'settings_bus_crossclock.v'),
                                'axi_fifo_2clk', ),
    'simple_spi_core': (('control', 'simple_spi_core.v'),
                        'setting_reg', ),
    'gpio_atr': (('control', 'gpio_atr.v'),
                 'setting_reg', ),
    'synchronizer': (('control', 'synchronizer.v'),),
    'reset_sync': (('control', 'reset_sync.v'),),
    # Timing
    'time_compare': (('timing', 'time_compare.v'),),
    'timekeeper': (('timing', 'timekeeper.v'),
                    'setting_reg'),
    # Radio
    'radio': (('radio', 'radio.v'),
              'axi_mux4',
              'axi_demux4',
              'axi_fifo_2clk_cascade',
              'axi_fifo_2clk',
              'radio_ctrl_proc',
              'settings_bus_crossclock',
              'setting_reg',
              'simple_spi_core',
              'gpio_atr',
              'new_tx_deframer',
              'new_tx_control',
              'tx_responder',
              'duc_chain',
              'tx_frontend',
              'source_flow_control',
              'new_rx_framer',
              'new_rx_control',
              'rx_frontend',
              'ddc_chain_x300',
              'timekeeper',
          ),
    #DSP
    'duc_chain': (('dsp', 'duc_chain.v'),
                  'setting_reg',
                  'cic_strober',
                  'hb47_int',
                  'hb_interp',
                  'small_hb_int',
                  'cic_interp',
                  'cordic_z24',
                  'MULT_MACRO',
              ),
    'cordic_z24': (('dsp', 'cordic_z24.v'),
                   'cordic_stage', ),
    'cordic_stage': (('dsp', 'cordic_stage.v'),),
    'cic_interp': (('dsp', 'cic_interp.v'),
                   'sign_extend',
                   'cic_int_shifter',),
    'cic_decim': (('dsp', 'cic_decim.v'),
                  'sign_extend',
                  'cic_dec_shifter',
              ),
    'cic_dec_shifter': (('dsp', 'cic_dec_shifter.v'),),
    'cic_int_shifter': (('dsp', 'cic_int_shifter.v'),),
    'small_hb_int': (('dsp', 'small_hb_int.v'),
                     'add2_and_round_reg',
                     'MULT18X18S',
                     'acc',
                     'round_reg',
                     'clip_reg',
                 ),
    'acc': (('dsp', 'acc.v'),
            'sign_extend',),
    'cic_strober': (('dsp', 'cic_strober.v'),),
    'hb47_int': (('dsp', 'hb47_int.v'),
                 'add_then_mac',
                 'round_reg',
                 'clip_reg',),
    'add_then_mac': (('dsp', 'add_then_mac.v'),
                     'DSP48E1',
                     'DSP48A1',),
    'DSP48E1': (),
    'DSP48A1': (),
    'MULT_MACRO': (),
    'hb_interp': (('dsp', 'hb_interp.v'),
                  'srl',
                  'add2_reg',
                  'add2_and_round_reg',
                  'acc',
                  'clip',
                  'round',
              ),
    'tx_frontend': (('dsp', 'tx_frontend.v'),
                    'setting_reg',
                    'MULT18X18S',
                    'add2_and_clip_reg',
                    'round_sd',
                ),
    'add2_and_clip_reg': (('dsp', 'add2_and_clip_reg.v'),
                          'add2_and_clip'),
    'add2_and_clip': (('dsp', 'add2_and_clip.v'),
                      'clip', ),
    'add2_reg': (('dsp', 'add2_reg.v'),
                 'add2'),
    'add2': (('dsp', 'add2.v'),),
    'add2_and_round_reg': (('dsp', 'add2_and_round_reg.v'),
                           'add2_and_round'),
    'add2_and_round': (('dsp', 'add2_and_round.v'),),
    'clip': (('dsp', 'clip.v'),),
    'clip_reg': (('dsp', 'clip_reg.v'),
             'clip'),
    'srl': (('dsp', 'srl.v'),
            'SRL16E',),
    'round_sd': (('dsp', 'round_sd.v'),
                 'sign_extend',
                 'add2_and_clip_reg',
                 'round', ),
    'round_reg': (('dsp', 'round_reg.v'),
                  'round'),
    'MULT18X18S': (), # Inbuilt Vivado.  Leave Empty
    'SRL16E': (),
    'sign_extend': (('dsp', 'sign_extend.v'),),
    'round': (('dsp', 'round.v'),),
    'rx_frontend': (('dsp', 'rx_frontend.v'),
                    'setting_reg',
                    'rx_dcoffset',
                    'MULT18X18S',
                    'add2_and_clip_reg',
                ),
    'rx_dcoffset': (('dsp', 'rx_dcoffset.v'),
                    'round_sd',
                    'add2_and_clip_reg',
                ),
    'ddc_chain_x300': (('dsp', 'ddc_chain_x300.v'),
                       'setting_reg',
                       'cordic_z24',
                       'clip_reg',
                       'cic_strober',
                       'cic_decim',
                       'hbdec1',
                       'hbdec2',
                       'hbdec3',
                       'MULT_MACRO',
                       'round_sd',
                   ),
    'hbdec1': (('top', 'e300', 'coregen_dsp', 'hbdec1.ngc'),
               ('top', 'e300', 'coregen_dsp', 'hbdec1.v'),),
    'hbdec2': (('top', 'e300', 'coregen_dsp', 'hbdec2.ngc'),
               ('top', 'e300', 'coregen_dsp', 'hbdec2.v'),),
    'hbdec3': (('top', 'e300', 'coregen_dsp', 'hbdec3.ngc'),
               ('top', 'e300', 'coregen_dsp', 'hbdec3.v'),),
    # wishbone
    'wb_1master': (('wishbone', 'wb_1master.v'), ),
    'settings_bus': (('wishbone', 'settings_bus.v'), ),
    'axi_stream_to_wb': (('wishbone', 'axi_stream_to_wb.v'),
                         'ram_2port',
                     ),
    'settings_readback': (('wishbone', 'settings_readback.v'),),
    'simple_uart': (('wishbone', 'simple_uart.v'),
                    'simple_uart_rx', ),
    'simple_uart_rx': (('wishbone', 'simple_uart_rx.v'),
                       'axi_fifo', ),
    'i2c_master_top': (('wishbone', 'i2c_master_top.v'),
                       'i2c_master_byte_ctrl',
                   ),
    'i2c_master_byte_ctrl': (('wishbone', 'i2c_master_byte_ctrl.v'),
                             'i2c_master_bit_ctrl',),
    'i2c_master_bit_ctrl': (('wishbone', 'i2c_master_bit_ctrl.v'),),
    
                            
                             
    #zpu
    'zpu_wb_top': (('zpu', 'zpu_wb_top.vhd'),
                   'zpu_system0', ),
    'zpu_system0': (('zpu', 'wishbone', 'zpu_system.vhd'),
                    'zpu_core',
                    'zpu_wb_bridge',),
    'zpu_core': (('zpu', 'core', 'zpu_core.vhd'),),
    'zpu_wb_bridge': (('zpu', 'wishbone', 'zpu_wb_bridge.vhd'),),
    #io_port2
    'pcie_wb_reg_core': (('io_port2', 'pcie_wb_reg_core.v'),
                         'pcie_axi_wb_conv',
                         'ioport2_msg_decode',
                         'ioport2_msg_encode',
                         'axi_mux4',),
    'pcie_axi_wb_conv': (('io_port2', 'pcie_axi_wb_Conv.v'),
                         'settings_bus',
                         'settings_readback',
                         'setting_reg',
                         'axi_fifo_short',
                         'ioport2_msg_decode',
                         'axi_fifo_short',
                         'ioport2_msg_decode', ),
    'ioport2_msg_decode': (('io_port2', 'ioport2_msg_codec.v'),),
    'ioport2_msg_encode': (('io_port2', 'ioport2_msg_codec.v'),),
    # xge_interface
    'xge_mac_wrapper': (('xge_interface', 'xge_mac_wrapper.v'),
                        'xge_mac',
                        'xge_handshake',
                        'xge64_to_axi64',
                        'axi64_4k_2clk_fifo',
                        'axi64_to_xge64',
                        'axi64_8k_2clk_fifo',
                        'axi_count_packets_in_fifo',),
    'xge_handshake': (('xge_interface', 'xge_handshake.v'),),
    'xge64_to_axi64': (('xge_interface', 'xge64_to_axi64.v'),),
    'axi64_to_xge64': (('xge_interface', 'axi64_to_xge64.v'),),
    'axi64_4k_2clk_fifo': (axi64_4k_2clk_fifo_builder,),
    'axi64_8k_2clk_fifo': (axi64_8k_2clk_fifo_builder,),
    'axi_count_packets_in_fifo': (('xge_interface', 'axi_count_packets_in_fifo.v'),),    
    #xge
    'xge_mac': (('xge', 'rtl', 'verilog', 'xge_mac.v'),
                'rx_enqueue',
                'rx_dequeue',
                'rx_data_fifo',
                'rx_hold_fifo',
                'tx_enqueue',
                'tx_dequeue',
                'tx_data_fifo',
                'tx_hold_fifo',
                'fault_sm',
                'sync_clk_wb',
                'sync_clk_xgmii_tx',
                'wishbone_if',),
    'wishbone_if': (('xge', 'rtl', 'verilog', 'wishbone_if.v'),),
    'sync_clk_xgmii_tx': (('xge', 'rtl', 'verilog', 'sync_clk_xgmii_tx.v'),
                          'meta_sync',),
    'fault_sm': (('xge', 'rtl', 'verilog', 'fault_sm.v'),),
    'sync_clk_wb': (('xge', 'rtl', 'verilog', 'sync_clk_wb.v'),
                    'meta_sync',),
    'meta_sync': (('xge', 'rtl', 'verilog', 'meta_sync.v'),
                  'meta_sync_single',),
    'meta_sync_single': (('xge', 'rtl', 'verilog', 'meta_sync_single.v'),),
    'rx_enqueue': (('xge', 'rtl', 'verilog', 'rx_enqueue.v'),),
    'rx_dequeue': (('xge', 'rtl', 'verilog', 'rx_dequeue.v'),),
    'rx_data_fifo': (('xge', 'rtl', 'verilog', 'rx_data_fifo.v'),
                     'generic_fifo',),
    'rx_hold_fifo': (('xge', 'rtl', 'verilog', 'rx_hold_fifo.v'),
                     'generic_fifo',),
    'tx_enqueue': (('xge', 'rtl', 'verilog', 'tx_enqueue.v'),),
    'tx_dequeue': (('xge', 'rtl', 'verilog', 'tx_dequeue.v'),),
    'tx_data_fifo': (('xge', 'rtl', 'verilog', 'tx_data_fifo.v'),
                     'generic_fifo',),
    'tx_hold_fifo': (('xge', 'rtl', 'verilog', 'tx_hold_fifo.v'),
                     'generic_fifo',),
    'generic_fifo': (('xge', 'rtl', 'verilog', 'generic_fifo.v'),
                     'generic_fifo_ctrl',
                     'generic_mem_small',
                     'generic_mem_medium',
                     'generic_mem_xilinx_block',
                 ),
    'generic_fifo_ctrl': (('xge', 'rtl', 'verilog', 'generic_fifo_ctrl.v'),),
    'generic_mem_small': (('xge', 'rtl', 'verilog', 'generic_mem_small.v'),),
    'generic_mem_medium': (('xge', 'rtl', 'verilog', 'generic_mem_medium.v'),),
    'generic_mem_xilinx_block': (('xge', 'rtl', 'verilog', 'generic_mem_xilinx_block.v'),),
    # simple_gemac
    'simple_gemac_wrapper': (('simple_gemac', 'simple_gemac_wrapper.v'),
                             'simple_gemac',
                             'rxmac_to_ll8',
                             'll8_to_axi64',
                             'axi64_8k_2clk_fifo',
                             'axi64_8k_2clk_fifo',
                             'axi64_to_ll8',
                             'll8_to_txmac',
                             'flow_ctrl_rx',
                             'mdio',),
    'simple_gemac': (('simple_gemac', 'simple_gemac.v'),
                     'simple_gemac_tx',
                     'simple_gemac_rx',
                     'flow_ctrl_tx'),
    'simple_gemac_tx': (('simple_gemac', 'simple_gemac_tx.v'),),
    'simple_gemac_rx': (('simple_gemac', 'simple_gemac_rx.v'),),
    'flow_ctrl_tx': (('simple_gemac', 'flow_ctrl_tx.v'),),
    'flow_ctrl_rx': (('simple_gemac', 'flow_ctrl_rx.v'),),
    'rxmac_to_ll8': (('simple_gemac', 'rxmac_to_ll8.v'),),
    'll8_to_axi64': (('simple_gemac', 'll8_to_axi64.v'),),
    'axi64_to_ll8': (('simple_gemac', 'axi64_to_ll8.v'),),
    'll8_to_txmac': (('simple_gemac', 'll8_to_txmac.v'),),
    'mdio': (('simple_gemac', 'mdio.v'),),
    # axi
    'axi_dram_fifo': (('axi', 'axi_dram_fifo.v'),
                      'fifo_short_2clk',
                      'axi_embed_tlast',
                      'axi_fast_fifo',
                      'axi_fifo',
                      'axi_fast_extract_tlast',
                      'axi_dma_master',
                  ),
    'axi_dram_fifo': (('axi', 'axi_dram_fifo.v'),),
    #zynq_fifo
    'zynq_fifo_top': (('zynq_fifo', 'zynq_fifo_top.v'),
                      'zf_slave_settings',
                      'zf_slave_readback',
                      'cvita_dest_lookup',
                      'zf_arbiter',
                      'axi_datamover',
                  ),
    'zf_slave_settings': (('zynq_fifo', 'zf_slave_settings.v'),),
    'zf_slave_readback': (('zynq_fifo', 'zf_slave_readback.v'),),
    'zf_arbiter': (('zynq_fifo', 'zf_arbiter.v'),
                   'axi_fifo', ),
    # lib_io_capgen
    'catcodec_ddr_cmos': (('io_cap_gen', 'catcodec_ddr_cmos.v'),
                          'synchronizer',
                          'catcodec_mmcm',
                          'catcap_ddr_cmos',
                          'catgen_ddr_cmos', ),
    'catcap_ddr_cmos': (('io_cap_gen', 'catcap_ddr_cmos.v'),),
    'catgen_ddr_cmos': (('io_cap_gen', 'catgen_ddr_cmos.v'),),
    # e300
    'e300_core': ('setting_reg',
                  'axi_crossbar',
                  'axi_fifo',
                  'radio',
                  ('top', 'e300', 'e300_core.v'),
              ),
    'e300': (('top', 'e300', 'timing.xdc'),
             ('top', 'e300', 'e300.xdc'),
             ('top', 'e300', 'e300.v'),
             'e300_core',
             'e300_ps',
             'catcodec_ddr_cmos',
             'zynq_fifo_top',
             'ppsloop',),
    'e300_ps': (('top', 'e300', 'e300_ps.v'),
                'e300_ps_fclk0_mmcm',
                'reset_sync',
                'processing_system7',
                'axi4_fifo_512x64',
                'axi4_to_axi3_protocol_converter',
                'axi3_to_axi4lite_protocol_converter',
            ),
    'e300_ps_fclk0_mmcm': (e300_ps_fclk0_mmcm_builder,),
    'processing_system7': (processing_system7_builder,),
    'axi4_fifo_512x64': (axi4_fifo_512x64_builder,),
    'axi4_to_axi3_protocol_converter': (axi4_to_axi3_protocol_converter_builder,),
    'axi3_to_axi4lite_protocol_converter': (axi3_to_axi4lite_protocol_converter_builder,),    
    'ppsloop': (('top', 'e300', 'ppsloop.v'),
                'PLLE2_ADV',
                'ad5662_auto_spi',
            ),
    'PLLE2_ADV': (),
    'ad5662_auto_spi': (('top', 'e300', 'ad5662_auto_spi.v'),),
    'axi_datamover': (('top', 'e300', 'ip', 'axi_datamover', 'axi_datamover.xci'),),
    'catcodec_mmcm': (('top', 'e300', 'ip', 'catcodec_mmcm', 'catcodec_mmcm.xci'),),
    #x300
    'x300_core': (('top', 'x300', 'x300_core.v'),
                  'bus_int',
                  'radio',
                  'xge_mac_wrapper',
                  'simple_gemac_wrapper',
                  'axi_intercon_2x64_128',
                  'axi_dram_fifo',
                  'axi_fifo_short',
                  'axi_fifo',
              ),
    'bus_int': (('top', 'x300', 'bus_int.v'),
                'soft_ctrl',
                'setting_reg',
                'simple_spi_core',
                'synchronizer',
                'eth_interface',
                'axi_mux4',
                'axi_demux4',
                'axi_crossbar',
            ),
    'soft_ctrl': (('top', 'x300', 'soft_ctrl.v'),
                  'wb_1master',
                  'zpu_wb_top',
                  'dbuf_bootram',
                  'axi_stream_to_wb',
                  'settings_bus',
                  'settings_readback',
                  'simple_uart',
                  'pcie_wb_reg_core',
                  'i2c_master_top', ),
    'dbuf_bootram': (('top', 'x300', 'dbuf_bootram.v'),
                     'bootram',
                     'settings_bus',),
    'bootram': (bootram_builder,),
    'axi_intercon_2x64_128': (axi_intercon_2x64_128_builder,),
}

prepared_builders = {}
in_progress_builder_names = set()

def get_builder(name):
    if name in prepared_builders:
        b = prepared_builders[name]
    elif name not in builder_structure:
        raise Exception('Unknown name {}'.format(name))
    else:
        in_progress_builder_names.add(name)
        deps = builder_structure[name]
        filenames = []
        builders = []
        for dep in deps:
            if isinstance(dep, builder.Builder):
                builders.append(dep)
            elif isinstance(dep, tuple):
                if dep[0] == 'top':
                    filenames.append(os.path.join(
                        config.ettus_fpgadir, '..', *dep))
                else:
                    filenames.append(os.path.join(
                        config.ettus_fpgadir, *dep))
            elif dep in prepared_builders:
                builders.append(prepared_builders[dep])
            elif dep in in_progress_builder_names:
                raise Exception('Circular reference found: {}'.format(dep))
            elif dep in builder_structure:
                builders.append(get_builder(dep))
            else:
                raise Exception('Unknown dependency {}'.format(dep))
        in_progress_builder_names.remove(name)
        b = builder.make_simple_builder(
            filenames=filenames,
            builders=builders,
        )({})
    return b
